// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USER ====================
model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String    // Password hash
  phone             String?
  cpf               String?   @unique
  role              Role      @default(USER)
  avatar            String?
  active            Boolean   @default(true)
  resetToken        String?   @map("reset_token")
  resetTokenExpiry  DateTime? @map("reset_token_expiry")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  addresses      Address[]
  sales          Sale[]
  notifications  Notification[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
  GUEST
}

// ==================== ADDRESS ====================
model Address {
  id           String   @id @default(uuid())
  zipCode      String   @map("zip_code")
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  country      String   @default("Brasil")
  primary      Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
  @@index([userId])
}

// ==================== PRODUCT ====================
model Product {
  id             String          @id @default(uuid())
  name           String
  description    String?
  retailPrice    Decimal         @db.Decimal(10, 2) @map("retail_price")
  wholesalePrice Decimal         @db.Decimal(10, 2) @map("wholesale_price")
  quantity       Int             @default(0)
  status         ProductStatus   @default(ACTIVE)
  category       ProductCategory
  sku            String?         @unique
  active         Boolean         @default(true)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  // Relations
  images    ProductImage[]
  saleItems SaleItem[]

  @@map("products")
  @@index([category])
  @@index([status])
}

// ==================== PRODUCT IMAGE ====================
model ProductImage {
  id        String   @id @default(uuid())
  url       String
  alt       String?
  order     Int      @default(0)
  primary   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
  @@index([productId])
  @@index([primary])
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED

  @@map("product_status")
}

enum ProductCategory {
  MENS_SOCKS
  WOMENS_SOCKS
  KIDS_SOCKS
  SPORTS_SOCKS
  DRESS_SOCKS
  THERMAL_SOCKS
  ACCESSORIES
  OTHER

  @@map("product_category")
}

// ==================== SALE ====================
model Sale {
  id            String        @id @default(uuid())
  saleNumber    String        @unique @map("sale_number")
  status        SaleStatus    @default(PENDING)
  subtotal      Decimal       @db.Decimal(10, 2)
  discount      Decimal       @default(0) @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod @map("payment_method")
  notes         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  completedAt   DateTime?     @map("completed_at")
  canceledAt    DateTime?     @map("canceled_at")

  // Relations
  userId String     @map("user_id")
  user   User       @relation(fields: [userId], references: [id])
  items  SaleItem[]

  @@map("sales")
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum SaleStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
  REFUNDED

  @@map("sale_status")
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_SLIP
  BANK_TRANSFER

  @@map("payment_method")
}

// ==================== SALE ITEM ====================
model SaleItem {
  id        String   @id @default(uuid())
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2) @map("unit_price")
  subtotal  Decimal  @db.Decimal(10, 2)
  discount  Decimal  @default(0) @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  saleType  SaleType @default(RETAIL) @map("sale_type")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  saleId    String  @map("sale_id")
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
  @@index([saleId])
  @@index([productId])
}

enum SaleType {
  RETAIL
  WHOLESALE

  @@map("sale_type")
}

// ==================== NOTIFICATION ====================
model Notification {
  id        String             @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean            @default(false)
  link      String?            // Optional redirect link (e.g., /user/orders/123)
  metadata  Json?              // Additional data (e.g., saleId, previousStatus, newStatus)
  createdAt DateTime           @default(now()) @map("created_at")
  
  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

enum NotificationType {
  ORDER_CREATED
  ORDER_PROCESSING
  ORDER_PAID
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELED
  SYSTEM

  @@map("notification_type")
}
