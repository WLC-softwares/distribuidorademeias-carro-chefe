import type { Notification, NotificationType } from "@/models";

import { NotificationRepository } from "@/repositories";

export class NotificationService {
  private repository: NotificationRepository;

  constructor() {
    this.repository = new NotificationRepository();
  }

  /**
   * Criar notifica√ß√£o de pedido criado
   */
  async createOrderNotification(
    usuarioId: string,
    orderNumber: string,
    vendaId: string,
  ): Promise<Notification> {
    return this.repository.create({
      usuarioId,
      tipo: "PEDIDO_CRIADO" as NotificationType,
      titulo: "üéâ Pedido realizado com sucesso!",
      mensagem: `Seu pedido #${orderNumber} foi recebido e est√° sendo processado.`,
      link: `/user/pedidos`,
      metadata: { vendaId, orderNumber },
    });
  }

  /**
   * Criar notifica√ß√£o de mudan√ßa de status do pedido
   */
  async createOrderStatusNotification(
    usuarioId: string,
    orderNumber: string,
    vendaId: string,
    newStatus: string,
    oldStatus?: string,
  ): Promise<Notification> {
    const statusMessages: Record<
      string,
      {
        tipo: NotificationType;
        titulo: string;
        mensagem: string;
        emoji: string;
      }
    > = {
      PROCESSANDO: {
        tipo: "PEDIDO_PROCESSANDO" as NotificationType,
        titulo: "‚è≥ Pedido em processamento",
        mensagem: `Seu pedido #${orderNumber} est√° sendo preparado.`,
        emoji: "‚è≥",
      },
      PAGA: {
        tipo: "PEDIDO_PAGO" as NotificationType,
        titulo: "üí∞ Pagamento confirmado",
        mensagem: `O pagamento do pedido #${orderNumber} foi confirmado!`,
        emoji: "üí∞",
      },
      ENVIADA: {
        tipo: "PEDIDO_ENVIADO" as NotificationType,
        titulo: "üöö Pedido enviado",
        mensagem: `Seu pedido #${orderNumber} foi enviado e est√° a caminho!`,
        emoji: "üöö",
      },
      ENTREGUE: {
        tipo: "PEDIDO_ENTREGUE" as NotificationType,
        titulo: "‚úÖ Pedido entregue",
        mensagem: `Seu pedido #${orderNumber} foi entregue com sucesso!`,
        emoji: "‚úÖ",
      },
      CANCELADA: {
        tipo: "PEDIDO_CANCELADO" as NotificationType,
        titulo: "‚ùå Pedido cancelado",
        mensagem: `Seu pedido #${orderNumber} foi cancelado.`,
        emoji: "‚ùå",
      },
    };

    const statusInfo = statusMessages[newStatus] || {
      tipo: "SISTEMA" as NotificationType,
      titulo: "üì¶ Atualiza√ß√£o de pedido",
      mensagem: `O status do seu pedido #${orderNumber} foi atualizado.`,
      emoji: "üì¶",
    };

    return this.repository.create({
      usuarioId,
      tipo: statusInfo.tipo,
      titulo: statusInfo.titulo,
      mensagem: statusInfo.mensagem,
      link: `/user/pedidos`,
      metadata: { vendaId, orderNumber, newStatus, oldStatus },
    });
  }

  /**
   * Buscar notifica√ß√µes do usu√°rio
   */
  async getUserNotifications(
    usuarioId: string,
    limit?: number,
  ): Promise<Notification[]> {
    return this.repository.getByUserId(usuarioId, { limit });
  }

  /**
   * Buscar notifica√ß√µes n√£o lidas
   */
  async getUnreadNotifications(usuarioId: string): Promise<Notification[]> {
    return this.repository.getByUserId(usuarioId, { onlyUnread: true });
  }

  /**
   * Contar notifica√ß√µes n√£o lidas
   */
  async countUnread(usuarioId: string): Promise<number> {
    return this.repository.countUnread(usuarioId);
  }

  /**
   * Marcar notifica√ß√£o como lida
   */
  async markAsRead(id: string): Promise<void> {
    return this.repository.markAsRead(id);
  }

  /**
   * Marcar todas como lidas
   */
  async markAllAsRead(usuarioId: string): Promise<void> {
    return this.repository.markAllAsRead(usuarioId);
  }

  /**
   * Deletar notifica√ß√£o
   */
  async deleteNotification(id: string): Promise<void> {
    return this.repository.delete(id);
  }

  /**
   * Deletar todas lidas
   */
  async deleteAllRead(usuarioId: string): Promise<void> {
    return this.repository.deleteAllRead(usuarioId);
  }
}
